definitions:
  api.UserCreateRequest:
    properties:
      admin:
        type: boolean
      displayName:
        type: string
      username:
        type: string
    type: object
  api.UserGetResponse:
    properties:
      displayName:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  license:
    name: MIT
  title: Chat Backend API
paths:
  /api/message/id/:messageKey:
    delete:
      consumes:
      - application/json
      description: Deletes a Message
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Deletes a Message
      tags:
      - Message API
    get:
      consumes:
      - application/json
      description: Get the Message with the given id (messageKey)
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Get a Message
      tags:
      - Message API
  /api/note/:path:
    get:
      consumes:
      - application/json
      description: Returns the content of a Note based on it's path
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Returns the content of a Note
      tags:
      - Note API
  /api/room/:roomKey/message:
    post:
      consumes:
      - application/json
      description: Send a Message to a given Room with the given content
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Message a Room
      tags:
      - Message API
      - Room API
  /api/room/id/:roomKey:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Get a Room's information
      tags:
      - Room API
  /api/system/ping:
    get:
      consumes:
      - application/json
      description: says hello to the server, used for overview page
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: ping the server, used for overview page
      tags:
      - System API
  /api/user:
    post:
      consumes:
      - application/json
      description: creates a new user
      parameters:
      - description: User creation request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: create a new user
      tags:
      - User API
  /api/user/id/:userId:
    post:
      consumes:
      - application/json
      description: creates a page based on it's path
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: creates a page
      tags:
      - User API
  /api/user/id/:username:
    delete:
      consumes:
      - application/json
      description: deletes a user based on it's path
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: deletes a user
      tags:
      - User API
    get:
      consumes:
      - application/json
      description: retrieves information about the user specified by the username
      parameters:
      - description: Username of the user to retrieve
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/api.UserGetResponse'
        "400":
          description: Invalid username
          schema:
            type: string
        "500":
          description: User not found
          schema:
            type: string
      summary: get a user's info
      tags:
      - User API
  /api/webhook:
    get:
      consumes:
      - application/json
      description: Returns a list of WebHooks this user owns.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: List WebHooks that you own
      tags:
      - Webhook API
    post:
      consumes:
      - application/json
      description: '[Two Factor Authentication Required] Creates a new WebHook with
        the provided subscription details.'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: '[2FA] Create a new WebHook'
      tags:
      - Webhook API
  /api/webhook/:webhook:
    delete:
      consumes:
      - application/json
      description: '[Two Factor Authentication Required] Deletes a WebHook at the
        given WebHook key or id'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: '[2FA] Deletes a WebHook'
      tags:
      - Webhook API
    get:
      consumes:
      - application/json
      description: Provided either the key, name, or id returns the details of the
        webhook.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get's the details of a WebHook
      tags:
      - Webhook API
    post:
      consumes:
      - application/json
      description: '[Two Factor Authentication Required] Updates the details of an
        existing WebHook at the given WebHook key or id'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: '[2FA] Update the details of an existing WebHook'
      tags:
      - Webhook API
  /login/gitlab:
    get:
      consumes:
      - application/json
      description: where the user's browser is sent by GitLab after completing the
        oauth2 flow
      produces:
      - application/json
      responses:
        "302":
          description: Found
      summary: handles GitLab oauth2 callback
      tags:
      - Login
  /login/google:
    get:
      consumes:
      - application/json
      description: '{art 1 of the HTTP redirect to Google''s OpenID Connect (OAuth
        2.0) consent screen'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: HTTP redirect to Google's OpenID Connect (OAuth 2.0) consent screen
      tags:
      - Login
  /login/google/disconnect:
    delete:
      consumes:
      - application/json
      description: '[Two Factor Authentication Required] Removes your Google identity
        record from your account. This will prevent you from logging in with Google.'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: '[2FA] Removes your Google account information from your account.'
      tags:
      - Login
  /login/google/receive:
    get:
      consumes:
      - application/json
      description: Part 2 of the HTTP redirect to Google's OpenID Connect (OAuth 2.0)
        consent screen
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Redirect URI receiving address for Googl'e OAuth 2.0 flow
      tags:
      - Login
  /login/recent:
    get:
      consumes:
      - application/json
      description: gets a list of recent logins for provided token's associated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Gets your recent logins (up to 10)
      tags:
      - Login
  /note/:path:
    delete:
      consumes:
      - application/json
      description: Deletes a note based on it's path
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Deletes a note
      tags:
      - Note API
    post:
      consumes:
      - application/json
      description: Writes the provided content to the Note path provided in the url
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Writes a Note
      tags:
      - Note API
securityDefinitions:
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
